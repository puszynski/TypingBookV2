@page "/"
@using TypingBookBlazorApp.Services
@using TypingBookBlazorApp.ViewModels
@inject TypingService TypingService
@inject IJSRuntime _jsRuntime

<h1><span class="typed">@typed</span><span class="blink@(isWrongTyped ? "Red" : "White")">@currentChar</span>@toBeTyped</h1>


@code {
    private TypingViewModel model;

    private int actuallChar;
    private string actuallPageText;

    private string typed;
    private char currentChar;
    private string toBeTyped;

    private bool isWrongTyped = false;

    protected override async Task OnInitializedAsync()
    {
        model = await TypingService.Get();
        await SwitchBookPage(model.CurrentBookPage);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await _jsRuntime.InvokeAsync<object>("initializeFromCSharp", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async ValueTask CSharpOnKeyDown(char key)
    {
        if (key == currentChar)
            await TypedWithSuccess();
        else
            await TypedWrong();
    }

    async Task TypedWithSuccess()
    {
        actuallChar++;

        typed = actuallPageText.Substring(0, actuallChar);
        currentChar = actuallPageText[actuallChar];
        toBeTyped = actuallPageText.Substring(actuallChar + 1, actuallPageText.Length - actuallChar - 1);

        isWrongTyped = false;

        if (!toBeTyped.Any())
        {
            model.CurrentBookPage++;
            await SwitchBookPage(model.CurrentBookPage);
        }

        StateHasChanged();
    }

    async Task TypedWrong()
    {
        //todo add class="wrongTyped" but how to make it to allow writing + get red wrong typed chars in past..
        isWrongTyped = true;

        StateHasChanged();
    }

    async Task SwitchBookPage(int page)
    {
        actuallPageText = model.BookPages[model.CurrentBookPage];
        actuallChar = 0;

        typed = "";
        currentChar = actuallPageText[actuallChar];
        toBeTyped = actuallPageText.Substring(actuallChar + 1, actuallPageText.Length - 1);
    }
}